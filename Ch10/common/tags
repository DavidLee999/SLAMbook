!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AngleAxisAndCenterToCamera	BALProblem.cpp	/^void BALProblem::AngleAxisAndCenterToCamera(const double* angle_axis, const double* center, double* camera) const$/;"	f	class:BALProblem	signature:(const double* angle_axis, const double* center, double* camera) const
AngleAxisAndCenterToCamera	BALProblem.h	/^        void AngleAxisAndCenterToCamera(const double* angle_axis, const double* center, double* camera) const;$/;"	p	class:BALProblem	access:private	signature:(const double* angle_axis, const double* center, double* camera) const
AngleAxisRotationPoint	tools/rotation.h	/^inline void AngleAxisRotationPoint(const T angle_axis[3], cons T pt[3], T result[3])$/;"	f	signature:(const T angle_axis[3], cons T pt[3], T result[3])
AngleAxisToQuaternion	tools/rotation.h	/^inline void AngleAxisToQuaternion(const T* angle_axis, T* quaternion)$/;"	f	signature:(const T* angle_axis, T* quaternion)
BALPROBLEM_H	BALProblem.h	/^#define BALPROBLEM_H$/;"	d
BALProblem	BALProblem.cpp	/^BALProblem::BALProblem(const std::string& filename, bool use_quaternions)$/;"	f	class:BALProblem	signature:(const std::string& filename, bool use_quaternions)
BALProblem	BALProblem.h	/^        explicit BALProblem(const std::string& filename, bool use_quaternions = false);$/;"	p	class:BALProblem	access:public	signature:(const std::string& filename, bool use_quaternions = false)
BALProblem	BALProblem.h	/^class BALProblem$/;"	c
BALProblem::AngleAxisAndCenterToCamera	BALProblem.cpp	/^void BALProblem::AngleAxisAndCenterToCamera(const double* angle_axis, const double* center, double* camera) const$/;"	f	class:BALProblem	signature:(const double* angle_axis, const double* center, double* camera) const
BALProblem::AngleAxisAndCenterToCamera	BALProblem.h	/^        void AngleAxisAndCenterToCamera(const double* angle_axis, const double* center, double* camera) const;$/;"	p	class:BALProblem	access:private	signature:(const double* angle_axis, const double* center, double* camera) const
BALProblem::BALProblem	BALProblem.cpp	/^BALProblem::BALProblem(const std::string& filename, bool use_quaternions)$/;"	f	class:BALProblem	signature:(const std::string& filename, bool use_quaternions)
BALProblem::BALProblem	BALProblem.h	/^        explicit BALProblem(const std::string& filename, bool use_quaternions = false);$/;"	p	class:BALProblem	access:public	signature:(const std::string& filename, bool use_quaternions = false)
BALProblem::CameraToAngleAxisAndCenter	BALProblem.cpp	/^void BALProblem::CameraToAngleAxisAndCenter(const double* camera, double* angle_axis, double* center) const$/;"	f	class:BALProblem	signature:(const double* camera, double* angle_axis, double* center) const
BALProblem::CameraToAngleAxisAndCenter	BALProblem.h	/^        void CameraToAngleAxisAndCenter(const double* camera, double* angle_axis, double* center) const;$/;"	p	class:BALProblem	access:private	signature:(const double* camera, double* angle_axis, double* center) const
BALProblem::Normalize	BALProblem.cpp	/^void BALProblem::Normalize()$/;"	f	class:BALProblem	signature:()
BALProblem::Normalize	BALProblem.h	/^        void Normalize();$/;"	p	class:BALProblem	access:public	signature:()
BALProblem::Perturb	BALProblem.cpp	/^void BALProblem::Perturb(const double rotation_sigma, const double translation_sigma, const double point_sigma)$/;"	f	class:BALProblem	signature:(const double rotation_sigma, const double translation_sigma, const double point_sigma)
BALProblem::Perturb	BALProblem.h	/^        void Perturb(const double rotation_sigma, const double translation_sigma, const double point_sigma);$/;"	p	class:BALProblem	access:public	signature:(const double rotation_sigma, const double translation_sigma, const double point_sigma)
BALProblem::WriteToFile	BALProblem.cpp	/^void BALProblem::WriteToFile(const std::string& filename) const$/;"	f	class:BALProblem	signature:(const std::string& filename) const
BALProblem::WriteToFile	BALProblem.h	/^        void WriteToFile(const std::string& filename) const;$/;"	p	class:BALProblem	access:public	signature:(const std::string& filename) const
BALProblem::WriteToPLYFile	BALProblem.cpp	/^void BALProblem::WriteToPLYFile(const std::string& filename) const$/;"	f	class:BALProblem	signature:(const std::string& filename) const
BALProblem::WriteToPLYFile	BALProblem.h	/^        void WriteToPLYFile(const std::string& filename) const;$/;"	p	class:BALProblem	access:public	signature:(const std::string& filename) const
BALProblem::camera_block_size	BALProblem.h	/^        int camera_block_size() const$/;"	f	class:BALProblem	access:public	signature:() const
BALProblem::camera_for_observation	BALProblem.h	/^        const double* camera_for_observation(int i) const$/;"	f	class:BALProblem	access:public	signature:(int i) const
BALProblem::camera_index	BALProblem.h	/^        const int* camera_index() const$/;"	f	class:BALProblem	access:public	signature:() const
BALProblem::camera_index_	BALProblem.h	/^        int* camera_index_;$/;"	m	class:BALProblem	access:private
BALProblem::cameras	BALProblem.h	/^        const double* cameras() const$/;"	f	class:BALProblem	access:public	signature:() const
BALProblem::mutable_camera_for_observation	BALProblem.h	/^        double* mutable_camera_for_observation(int i)$/;"	f	class:BALProblem	access:public	signature:(int i)
BALProblem::mutable_cameras	BALProblem.h	/^        double* mutable_cameras()$/;"	f	class:BALProblem	access:public	signature:()
BALProblem::mutable_point_for_observation	BALProblem.h	/^        double* mutable_point_for_observation(int i)$/;"	f	class:BALProblem	access:public	signature:(int i)
BALProblem::mutable_points	BALProblem.h	/^        double* mutable_points()$/;"	f	class:BALProblem	access:public	signature:()
BALProblem::num_cameras	BALProblem.h	/^        int num_cameras() const$/;"	f	class:BALProblem	access:public	signature:() const
BALProblem::num_cameras_	BALProblem.h	/^        int num_cameras_;$/;"	m	class:BALProblem	access:private
BALProblem::num_observations	BALProblem.h	/^        int num_observations() const$/;"	f	class:BALProblem	access:public	signature:() const
BALProblem::num_observations_	BALProblem.h	/^        int num_observations_;$/;"	m	class:BALProblem	access:private
BALProblem::num_parameters	BALProblem.h	/^        int num_parameters() const$/;"	f	class:BALProblem	access:public	signature:() const
BALProblem::num_parameters_	BALProblem.h	/^        int num_parameters_;$/;"	m	class:BALProblem	access:private
BALProblem::num_points	BALProblem.h	/^        int num_points() const$/;"	f	class:BALProblem	access:public	signature:() const
BALProblem::num_points_	BALProblem.h	/^        int num_points_;$/;"	m	class:BALProblem	access:private
BALProblem::observations	BALProblem.h	/^        const double* observations() const$/;"	f	class:BALProblem	access:public	signature:() const
BALProblem::observations_	BALProblem.h	/^        double* observations_;$/;"	m	class:BALProblem	access:private
BALProblem::parameters	BALProblem.h	/^        const double* parameters() const$/;"	f	class:BALProblem	access:public	signature:() const
BALProblem::parameters_	BALProblem.h	/^        double* parameters_;$/;"	m	class:BALProblem	access:private
BALProblem::point_block_size	BALProblem.h	/^        int point_block_size() const$/;"	f	class:BALProblem	access:public	signature:() const
BALProblem::point_for_observation	BALProblem.h	/^        const double* point_for_observation(int i) const$/;"	f	class:BALProblem	access:public	signature:(int i) const
BALProblem::point_index	BALProblem.h	/^        const int* point_index() const$/;"	f	class:BALProblem	access:public	signature:() const
BALProblem::point_index_	BALProblem.h	/^        int* point_index_;$/;"	m	class:BALProblem	access:private
BALProblem::points	BALProblem.h	/^        const double* points() const$/;"	f	class:BALProblem	access:public	signature:() const
BALProblem::use_quaternions_	BALProblem.h	/^        bool use_quaternions_;$/;"	m	class:BALProblem	access:private
BALProblem::~BALProblem	BALProblem.h	/^        ~BALProblem()$/;"	f	class:BALProblem	access:public	signature:()
BUNDLEPARAMS_H	BundleParams.h	/^#define BUNDLEPARAMS_H$/;"	d
BundleParams	BundleParams.h	/^        BundleParams(int argc, char** argv);$/;"	p	struct:BundleParams	access:public	signature:(int argc, char** argv)
BundleParams	BundleParams.h	/^BundleParams::BundleParams(int argc, char** argv)$/;"	f	class:BundleParams	signature:(int argc, char** argv)
BundleParams	BundleParams.h	/^struct BundleParams$/;"	s
BundleParams::BundleParams	BundleParams.h	/^        BundleParams(int argc, char** argv);$/;"	p	struct:BundleParams	access:public	signature:(int argc, char** argv)
BundleParams::BundleParams	BundleParams.h	/^BundleParams::BundleParams(int argc, char** argv)$/;"	f	class:BundleParams	signature:(int argc, char** argv)
BundleParams::arg	BundleParams.h	/^        CommandArgs arg;$/;"	m	struct:BundleParams	access:public
BundleParams::dense_linear_algebra_library	BundleParams.h	/^        string dense_linear_algebra_library;$/;"	m	struct:BundleParams	access:public
BundleParams::final_ply	BundleParams.h	/^        string final_ply;$/;"	m	struct:BundleParams	access:public
BundleParams::initial_ply	BundleParams.h	/^        string initial_ply;$/;"	m	struct:BundleParams	access:public
BundleParams::input	BundleParams.h	/^        string input;$/;"	m	struct:BundleParams	access:public
BundleParams::linear_solver	BundleParams.h	/^        string linear_solver;$/;"	m	struct:BundleParams	access:public
BundleParams::num_iterations	BundleParams.h	/^        int num_iterations;$/;"	m	struct:BundleParams	access:public
BundleParams::point_sigma	BundleParams.h	/^        double point_sigma;$/;"	m	struct:BundleParams	access:public
BundleParams::random_seed	BundleParams.h	/^        int random_seed;$/;"	m	struct:BundleParams	access:public
BundleParams::robustify	BundleParams.h	/^        bool robustify;$/;"	m	struct:BundleParams	access:public
BundleParams::rotation_sigma	BundleParams.h	/^        double rotation_sigma;$/;"	m	struct:BundleParams	access:public
BundleParams::sparse_linear_algebra_library	BundleParams.h	/^        string sparse_linear_algebra_library;$/;"	m	struct:BundleParams	access:public
BundleParams::translation_sigma	BundleParams.h	/^        double translation_sigma;$/;"	m	struct:BundleParams	access:public
BundleParams::trust_region_strategy	BundleParams.h	/^        string trust_region_strategy;$/;"	m	struct:BundleParams	access:public
BundleParams::~BundleParams	BundleParams.h	/^        virtual ~BundleParams() {}$/;"	f	struct:BundleParams	access:public	signature:()
CAT_BOOL	flags/command_args.cpp	/^    CAT_DOUBLE, CAT_FLOAT, CAT_INT, CAT_STRING, CAT_BOOL, CAT_VECTOR_INT, CAT_VECTOR_DOUBLE$/;"	e	enum:CommandArgumentType	file:
CAT_DOUBLE	flags/command_args.cpp	/^    CAT_DOUBLE, CAT_FLOAT, CAT_INT, CAT_STRING, CAT_BOOL, CAT_VECTOR_INT, CAT_VECTOR_DOUBLE$/;"	e	enum:CommandArgumentType	file:
CAT_FLOAT	flags/command_args.cpp	/^    CAT_DOUBLE, CAT_FLOAT, CAT_INT, CAT_STRING, CAT_BOOL, CAT_VECTOR_INT, CAT_VECTOR_DOUBLE$/;"	e	enum:CommandArgumentType	file:
CAT_INT	flags/command_args.cpp	/^    CAT_DOUBLE, CAT_FLOAT, CAT_INT, CAT_STRING, CAT_BOOL, CAT_VECTOR_INT, CAT_VECTOR_DOUBLE$/;"	e	enum:CommandArgumentType	file:
CAT_STRING	flags/command_args.cpp	/^    CAT_DOUBLE, CAT_FLOAT, CAT_INT, CAT_STRING, CAT_BOOL, CAT_VECTOR_INT, CAT_VECTOR_DOUBLE$/;"	e	enum:CommandArgumentType	file:
CAT_VECTOR_DOUBLE	flags/command_args.cpp	/^    CAT_DOUBLE, CAT_FLOAT, CAT_INT, CAT_STRING, CAT_BOOL, CAT_VECTOR_INT, CAT_VECTOR_DOUBLE$/;"	e	enum:CommandArgumentType	file:
CAT_VECTOR_INT	flags/command_args.cpp	/^    CAT_DOUBLE, CAT_FLOAT, CAT_INT, CAT_STRING, CAT_BOOL, CAT_VECTOR_INT, CAT_VECTOR_DOUBLE$/;"	e	enum:CommandArgumentType	file:
CamProjectionWithDistortion	projection.h	/^inline bool CamProjectionWithDistortion(const T* camera, const T* point, T* predictions)$/;"	f	signature:(const T* camera, const T* point, T* predictions)
CameraToAngleAxisAndCenter	BALProblem.cpp	/^void BALProblem::CameraToAngleAxisAndCenter(const double* camera, double* angle_axis, double* center) const$/;"	f	class:BALProblem	signature:(const double* camera, double* angle_axis, double* center) const
CameraToAngleAxisAndCenter	BALProblem.h	/^        void CameraToAngleAxisAndCenter(const double* camera, double* angle_axis, double* center) const;$/;"	p	class:BALProblem	access:private	signature:(const double* camera, double* angle_axis, double* center) const
CmpPairFirst	flags/command_args.cpp	/^struct CmpPairFirst$/;"	s	file:
CmpPairFirst::operator ()	flags/command_args.cpp	/^    bool operator () (const std::pair<T1, T2>& left, const std::pair<T1, T2>& right)$/;"	f	struct:CmpPairFirst	access:public	signature:(const std::pair<T1, T2>& left, const std::pair<T1, T2>& right)
CommandArgs	flags/command_args.cpp	/^CommandArgs::CommandArgs()$/;"	f	class:CommandArgs	signature:()
CommandArgs	flags/command_args.h	/^        CommandArgs();$/;"	p	class:CommandArgs	access:public	signature:()
CommandArgs	flags/command_args.h	/^class CommandArgs$/;"	c
CommandArgs::CommandArgs	flags/command_args.cpp	/^CommandArgs::CommandArgs()$/;"	f	class:CommandArgs	signature:()
CommandArgs::CommandArgs	flags/command_args.h	/^        CommandArgs();$/;"	p	class:CommandArgs	access:public	signature:()
CommandArgs::CommandArgument	flags/command_args.h	/^        struct CommandArgument$/;"	s	class:CommandArgs	access:public
CommandArgs::CommandArgument::CommandArgument	flags/command_args.h	/^            CommandArgument() : name(""), description(""), type(0), data(0), parsed(false), optional(false) {}$/;"	f	struct:CommandArgs::CommandArgument	access:public	signature:()
CommandArgs::CommandArgument::data	flags/command_args.h	/^            void* data;$/;"	m	struct:CommandArgs::CommandArgument	access:public
CommandArgs::CommandArgument::description	flags/command_args.h	/^            std::string description;$/;"	m	struct:CommandArgs::CommandArgument	access:public
CommandArgs::CommandArgument::name	flags/command_args.h	/^            std::string name;$/;"	m	struct:CommandArgs::CommandArgument	access:public
CommandArgs::CommandArgument::optional	flags/command_args.h	/^            bool optional;$/;"	m	struct:CommandArgs::CommandArgument	access:public
CommandArgs::CommandArgument::parsed	flags/command_args.h	/^            bool parsed;$/;"	m	struct:CommandArgs::CommandArgument	access:public
CommandArgs::CommandArgument::type	flags/command_args.h	/^            int type;$/;"	m	struct:CommandArgs::CommandArgument	access:public
CommandArgs::_args	flags/command_args.h	/^        std::vector<CommandArgument> _args;$/;"	m	class:CommandArgs	access:protected
CommandArgs::_banner	flags/command_args.h	/^        std::string _banner;$/;"	m	class:CommandArgs	access:protected
CommandArgs::_leftOvers	flags/command_args.h	/^        std::vector<CommandArgument> _leftOvers;$/;"	m	class:CommandArgs	access:protected
CommandArgs::_leftOversOptional	flags/command_args.h	/^        std::vector<CommandArgument> _leftOversOptional;$/;"	m	class:CommandArgs	access:protected
CommandArgs::_progName	flags/command_args.h	/^        std::string _progName;$/;"	m	class:CommandArgs	access:protected
CommandArgs::arg2str	flags/command_args.cpp	/^std::string CommandArgs::arg2str(const CommandArgument& ca) const$/;"	f	class:CommandArgs	signature:(const CommandArgument& ca) const
CommandArgs::arg2str	flags/command_args.h	/^        std::string arg2str(const CommandArgument& ca) const;$/;"	p	class:CommandArgs	access:protected	signature:(const CommandArgument& ca) const
CommandArgs::getBanner	flags/command_args.h	/^        const std::string& getBanner() const$/;"	f	class:CommandArgs	access:public	signature:() const
CommandArgs::param	flags/command_args.cpp	/^void CommandArgs::param(const std::strng& name, bool& p, bool defValue, const std::string& desc)$/;"	f	class:CommandArgs	signature:(const std::strng& name, bool& p, bool defValue, const std::string& desc)
CommandArgs::param	flags/command_args.cpp	/^void CommandArgs::param(const std::strng& name, double& p, double defValue, const std::string& desc)$/;"	f	class:CommandArgs	signature:(const std::strng& name, double& p, double defValue, const std::string& desc)
CommandArgs::param	flags/command_args.cpp	/^void CommandArgs::param(const std::strng& name, float& p, float defValue, const std::string& desc)$/;"	f	class:CommandArgs	signature:(const std::strng& name, float& p, float defValue, const std::string& desc)
CommandArgs::param	flags/command_args.cpp	/^void CommandArgs::param(const std::strng& name, int& p, int defValue, const std::string& desc)$/;"	f	class:CommandArgs	signature:(const std::strng& name, int& p, int defValue, const std::string& desc)
CommandArgs::param	flags/command_args.cpp	/^void CommandArgs::param(const std::strng& name, std::string& p, const std::strng& defValue, const std::string& desc)$/;"	f	class:CommandArgs	signature:(const std::strng& name, std::string& p, const std::strng& defValue, const std::string& desc)
CommandArgs::param	flags/command_args.cpp	/^void CommandArgs::param(const std::strng& name, std::vector<double>& p, const std::vector<double>& defValue, const std::string& desc)$/;"	f	class:CommandArgs	signature:(const std::strng& name, std::vector<double>& p, const std::vector<double>& defValue, const std::string& desc)
CommandArgs::param	flags/command_args.cpp	/^void CommandArgs::param(const std::strng& name, std::vector<int>& p, const std::vector<int>& defValue, const std::string& desc)$/;"	f	class:CommandArgs	signature:(const std::strng& name, std::vector<int>& p, const std::vector<int>& defValue, const std::string& desc)
CommandArgs::param	flags/command_args.h	/^        void param(const std::string& name, bool& p, bool defValue, const std::string& desc);$/;"	p	class:CommandArgs	access:public	signature:(const std::string& name, bool& p, bool defValue, const std::string& desc)
CommandArgs::param	flags/command_args.h	/^        void param(const std::string& name, double& p, double defValue, const std::string& desc);$/;"	p	class:CommandArgs	access:public	signature:(const std::string& name, double& p, double defValue, const std::string& desc)
CommandArgs::param	flags/command_args.h	/^        void param(const std::string& name, float& p, float defValue, const std::string& desc);$/;"	p	class:CommandArgs	access:public	signature:(const std::string& name, float& p, float defValue, const std::string& desc)
CommandArgs::param	flags/command_args.h	/^        void param(const std::string& name, int& p, int defValue, const std::string& desc);$/;"	p	class:CommandArgs	access:public	signature:(const std::string& name, int& p, int defValue, const std::string& desc)
CommandArgs::param	flags/command_args.h	/^        void param(const std::string& name, std::string& p, const std::string& defValue, const std::string& desc);$/;"	p	class:CommandArgs	access:public	signature:(const std::string& name, std::string& p, const std::string& defValue, const std::string& desc)
CommandArgs::param	flags/command_args.h	/^        void param(const std::string& name, std::vector<double>& p, const std::vector<double>& defValue, const std::string& desc);$/;"	p	class:CommandArgs	access:public	signature:(const std::string& name, std::vector<double>& p, const std::vector<double>& defValue, const std::string& desc)
CommandArgs::param	flags/command_args.h	/^        void param(const std::string& name, std::vector<int>& p, const std::vector<int>& defValue, const std::string& desc);$/;"	p	class:CommandArgs	access:public	signature:(const std::string& name, std::vector<int>& p, const std::vector<int>& defValue, const std::string& desc)
CommandArgs::paramLeftOver	flags/command_args.cpp	/^void CommandArgs::paramLeftOver(const std::string& name, std::string& p, const std::string& defValue, const std::string& desc, bool optional)$/;"	f	class:CommandArgs	signature:(const std::string& name, std::string& p, const std::string& defValue, const std::string& desc, bool optional)
CommandArgs::paramLeftOver	flags/command_args.h	/^        void paramLeftOver(const std::string& name, std::string& p, const std::string& defValue, const std::string& desc, bool optional = false);$/;"	p	class:CommandArgs	access:public	signature:(const std::string& name, std::string& p, const std::string& defValue, const std::string& desc, bool optional = false)
CommandArgs::parseArgs	flags/command_args.h	/^        bool parseArgs(int argc, char** argv, bool exitOnError = true);$/;"	p	class:CommandArgs	access:public	signature:(int argc, char** argv, bool exitOnError = true)
CommandArgs::parseArgs::parseArgs	flags/command_args.cpp	/^bool CommandArgs::parseArgs::parseArgs(int argc, char** argv, bool exitOnError)$/;"	f	class:CommandArgs::parseArgs	signature:(int argc, char** argv, bool exitOnError)
CommandArgs::parseParam	flags/command_args.h	/^        bool parseParam(const std::string& paramFlag) const;$/;"	p	class:CommandArgs	access:public	signature:(const std::string& paramFlag) const
CommandArgs::parsedParam	flags/command_args.cpp	/^bool CommandArgs::parsedParam(const std::string& param) const$/;"	f	class:CommandArgs	signature:(const std::string& param) const
CommandArgs::printHelp	flags/command_args.cpp	/^void CommandArgs::printHelp(std::ostream& os)$/;"	f	class:CommandArgs	signature:(std::ostream& os)
CommandArgs::printHelp	flags/command_args.h	/^        void printHelp(std::ostream& os);$/;"	p	class:CommandArgs	access:public	signature:(std::ostream& os)
CommandArgs::printParams	flags/command_args.h	/^        void printParams(std::ostream& os);$/;"	p	class:CommandArgs	access:public	signature:(std::ostream& os)
CommandArgs::setBanner	flags/command_args.cpp	/^void CommandArgs::setBanner(const std::string& banner)$/;"	f	class:CommandArgs	signature:(const std::string& banner)
CommandArgs::setBanner	flags/command_args.h	/^        void setBanner(const std::string& banner);$/;"	p	class:CommandArgs	access:public	signature:(const std::string& banner)
CommandArgs::str2arg	flags/command_args.cpp	/^void CommandArgs::str2arg(const std::string& input, CommandArgument& ca) const$/;"	f	class:CommandArgs	signature:(const std::string& input, CommandArgument& ca) const
CommandArgs::str2arg	flags/command_args.h	/^        void str2arg(const std::string& input, CommandArgument& ca) const;$/;"	p	class:CommandArgs	access:protected	signature:(const std::string& input, CommandArgument& ca) const
CommandArgs::trim	flags/command_args.h	/^        std::string trim(const std::string& s) const;$/;"	p	class:CommandArgs	access:protected	signature:(const std::string& s) const
CommandArgs::type2str	flags/command_args.cpp	/^const char* CommandArgs::type2str(int t) const$/;"	f	class:CommandArgs	signature:(int t) const
CommandArgs::type2str	flags/command_args.h	/^        const char* type2str(int t) const;$/;"	p	class:CommandArgs	access:protected	signature:(int t) const
CommandArgs::~CommandArgs	flags/command_args.h	/^        virtual ~CommandArgs();$/;"	p	class:CommandArgs	access:public	signature:()
CommandArgument	flags/command_args.h	/^            CommandArgument() : name(""), description(""), type(0), data(0), parsed(false), optional(false) {}$/;"	f	struct:CommandArgs::CommandArgument	access:public	signature:()
CommandArgument	flags/command_args.h	/^        struct CommandArgument$/;"	s	class:CommandArgs	access:public
CommandArgumentType	flags/command_args.cpp	/^enum CommandArgumentType$/;"	g	file:
ConstVectorRef	BALProblem.cpp	/^typedef Eigen::Map<const Eigen::VectorXd> ConstVectorRef;$/;"	t	file:
CrossProduct	tools/rotation.h	/^inline void CrossProduct(const T x[3], const T y[3], T result[3])$/;"	f	signature:(const T x[3], const T y[3], T result[3])
DotProduct	tools/rotation.h	/^inline T DotProduct(const T x[3], const T y[3])$/;"	f	signature:(const T x[3], const T y[3])
FscanfOrDie	BALProblem.cpp	/^void FscanfOrDie(FILE* fptr, const char* format, T* value)$/;"	f	signature:(FILE* fptr, const char* format, T* value)
G2O_COMMAND_ARGS_H	flags/command_args.h	/^#define G2O_COMMAND_ARGS_H$/;"	d
Median	BALProblem.cpp	/^double Median(std::vector<double>* data)$/;"	f	signature:(std::vector<double>* data)
Normalize	BALProblem.cpp	/^void BALProblem::Normalize()$/;"	f	class:BALProblem	signature:()
Normalize	BALProblem.h	/^        void Normalize();$/;"	p	class:BALProblem	access:public	signature:()
PROJECTION_H	projection.h	/^#define PROJECTION_H$/;"	d
Perturb	BALProblem.cpp	/^void BALProblem::Perturb(const double rotation_sigma, const double translation_sigma, const double point_sigma)$/;"	f	class:BALProblem	signature:(const double rotation_sigma, const double translation_sigma, const double point_sigma)
Perturb	BALProblem.h	/^        void Perturb(const double rotation_sigma, const double translation_sigma, const double point_sigma);$/;"	p	class:BALProblem	access:public	signature:(const double rotation_sigma, const double translation_sigma, const double point_sigma)
PerturbPoint3	BALProblem.cpp	/^void PerturbPoint3(const double sigma, double* point)$/;"	f	signature:(const double sigma, double* point)
QuaternionToAngleAxis	tools/rotation.h	/^inline void QuaternionToAngleAxis(const T* quaternion, T* angle_axis)$/;"	f	signature:(const T* quaternion, T* angle_axis)
RAND_H	tools/random.h	/^#define RAND_H$/;"	d
ROTATION_H	tools/rotation.h	/^#define ROTATION_H$/;"	d
RandDouble	tools/random.h	/^inline double RandDouble()$/;"	f	signature:()
RandNormal	tools/random.h	/^inline double RandNormal()$/;"	f	signature:()
VectorRef	BALProblem.cpp	/^typedef Eigen::Map<Eigen::VectorXd> VectorRef;$/;"	t	file:
WriteToFile	BALProblem.cpp	/^void BALProblem::WriteToFile(const std::string& filename) const$/;"	f	class:BALProblem	signature:(const std::string& filename) const
WriteToFile	BALProblem.h	/^        void WriteToFile(const std::string& filename) const;$/;"	p	class:BALProblem	access:public	signature:(const std::string& filename) const
WriteToPLYFile	BALProblem.cpp	/^void BALProblem::WriteToPLYFile(const std::string& filename) const$/;"	f	class:BALProblem	signature:(const std::string& filename) const
WriteToPLYFile	BALProblem.h	/^        void WriteToPLYFile(const std::string& filename) const;$/;"	p	class:BALProblem	access:public	signature:(const std::string& filename) const
_args	flags/command_args.h	/^        std::vector<CommandArgument> _args;$/;"	m	class:CommandArgs	access:protected
_banner	flags/command_args.h	/^        std::string _banner;$/;"	m	class:CommandArgs	access:protected
_leftOvers	flags/command_args.h	/^        std::vector<CommandArgument> _leftOvers;$/;"	m	class:CommandArgs	access:protected
_leftOversOptional	flags/command_args.h	/^        std::vector<CommandArgument> _leftOversOptional;$/;"	m	class:CommandArgs	access:protected
_progName	flags/command_args.h	/^        std::string _progName;$/;"	m	class:CommandArgs	access:protected
arg	BundleParams.h	/^        CommandArgs arg;$/;"	m	struct:BundleParams	access:public
arg2str	flags/command_args.cpp	/^std::string CommandArgs::arg2str(const CommandArgument& ca) const$/;"	f	class:CommandArgs	signature:(const CommandArgument& ca) const
arg2str	flags/command_args.h	/^        std::string arg2str(const CommandArgument& ca) const;$/;"	p	class:CommandArgs	access:protected	signature:(const CommandArgument& ca) const
camera_block_size	BALProblem.h	/^        int camera_block_size() const$/;"	f	class:BALProblem	access:public	signature:() const
camera_for_observation	BALProblem.h	/^        const double* camera_for_observation(int i) const$/;"	f	class:BALProblem	access:public	signature:(int i) const
camera_index	BALProblem.h	/^        const int* camera_index() const$/;"	f	class:BALProblem	access:public	signature:() const
camera_index_	BALProblem.h	/^        int* camera_index_;$/;"	m	class:BALProblem	access:private
cameras	BALProblem.h	/^        const double* cameras() const$/;"	f	class:BALProblem	access:public	signature:() const
commandArgs::~CommandArgs	flags/command_args.cpp	/^commandArgs::~CommandArgs()$/;"	f	class:commandArgs	signature:()
convertString	flags/command_args.cpp	/^bool convertString(const std::string& s, T& x)$/;"	f	signature:(const std::string& s, T& x)
data	flags/command_args.h	/^            void* data;$/;"	m	struct:CommandArgs::CommandArgument	access:public
dense_linear_algebra_library	BundleParams.h	/^        string dense_linear_algebra_library;$/;"	m	struct:BundleParams	access:public
description	flags/command_args.h	/^            std::string description;$/;"	m	struct:CommandArgs::CommandArgument	access:public
final_ply	BundleParams.h	/^        string final_ply;$/;"	m	struct:BundleParams	access:public
getBanner	flags/command_args.h	/^        const std::string& getBanner() const$/;"	f	class:CommandArgs	access:public	signature:() const
initial_ply	BundleParams.h	/^        string initial_ply;$/;"	m	struct:BundleParams	access:public
input	BundleParams.h	/^        string input;$/;"	m	struct:BundleParams	access:public
linear_solver	BundleParams.h	/^        string linear_solver;$/;"	m	struct:BundleParams	access:public
mutable_camera_for_observation	BALProblem.h	/^        double* mutable_camera_for_observation(int i)$/;"	f	class:BALProblem	access:public	signature:(int i)
mutable_cameras	BALProblem.h	/^        double* mutable_cameras()$/;"	f	class:BALProblem	access:public	signature:()
mutable_point_for_observation	BALProblem.h	/^        double* mutable_point_for_observation(int i)$/;"	f	class:BALProblem	access:public	signature:(int i)
mutable_points	BALProblem.h	/^        double* mutable_points()$/;"	f	class:BALProblem	access:public	signature:()
name	flags/command_args.h	/^            std::string name;$/;"	m	struct:CommandArgs::CommandArgument	access:public
num_cameras	BALProblem.h	/^        int num_cameras() const$/;"	f	class:BALProblem	access:public	signature:() const
num_cameras_	BALProblem.h	/^        int num_cameras_;$/;"	m	class:BALProblem	access:private
num_iterations	BundleParams.h	/^        int num_iterations;$/;"	m	struct:BundleParams	access:public
num_observations	BALProblem.h	/^        int num_observations() const$/;"	f	class:BALProblem	access:public	signature:() const
num_observations_	BALProblem.h	/^        int num_observations_;$/;"	m	class:BALProblem	access:private
num_parameters	BALProblem.h	/^        int num_parameters() const$/;"	f	class:BALProblem	access:public	signature:() const
num_parameters_	BALProblem.h	/^        int num_parameters_;$/;"	m	class:BALProblem	access:private
num_points	BALProblem.h	/^        int num_points() const$/;"	f	class:BALProblem	access:public	signature:() const
num_points_	BALProblem.h	/^        int num_points_;$/;"	m	class:BALProblem	access:private
observations	BALProblem.h	/^        const double* observations() const$/;"	f	class:BALProblem	access:public	signature:() const
observations_	BALProblem.h	/^        double* observations_;$/;"	m	class:BALProblem	access:private
operator ()	flags/command_args.cpp	/^    bool operator () (const std::pair<T1, T2>& left, const std::pair<T1, T2>& right)$/;"	f	struct:CmpPairFirst	access:public	signature:(const std::pair<T1, T2>& left, const std::pair<T1, T2>& right)
operator <<	flags/command_args.cpp	/^std::ostream& operator << (std::istream& os, const std::vector<double>& v);$/;"	p	file:	signature:(std::istream& os, const std::vector<double>& v)
operator <<	flags/command_args.cpp	/^std::ostream& operator << (std::ostream& os, const std::vector<double>& v)$/;"	f	signature:(std::ostream& os, const std::vector<double>& v)
operator <<	flags/command_args.cpp	/^std::ostream& operator << (std::ostream& os, const std::vector<int>& v)$/;"	f	signature:(std::ostream& os, const std::vector<int>& v)
operator <<	flags/command_args.cpp	/^std::ostream& operator << (std::ostream& os, const std::vector<int>& v);$/;"	p	file:	signature:(std::ostream& os, const std::vector<int>& v)
operator >>	flags/command_args.cpp	/^std::istream& operator >> (std::istream& is, std::vector<double>& v)$/;"	f	signature:(std::istream& is, std::vector<double>& v)
operator >>	flags/command_args.cpp	/^std::istream& operator >> (std::istream& is, std::vector<int>& v)$/;"	f	signature:(std::istream& is, std::vector<int>& v)
operator >>	flags/command_args.cpp	/^std::ostream& operator >> (std::istream& is, std::vector<double>& v);$/;"	p	file:	signature:(std::istream& is, std::vector<double>& v)
optional	flags/command_args.h	/^            bool optional;$/;"	m	struct:CommandArgs::CommandArgument	access:public
param	flags/command_args.cpp	/^void CommandArgs::param(const std::strng& name, bool& p, bool defValue, const std::string& desc)$/;"	f	class:CommandArgs	signature:(const std::strng& name, bool& p, bool defValue, const std::string& desc)
param	flags/command_args.cpp	/^void CommandArgs::param(const std::strng& name, double& p, double defValue, const std::string& desc)$/;"	f	class:CommandArgs	signature:(const std::strng& name, double& p, double defValue, const std::string& desc)
param	flags/command_args.cpp	/^void CommandArgs::param(const std::strng& name, float& p, float defValue, const std::string& desc)$/;"	f	class:CommandArgs	signature:(const std::strng& name, float& p, float defValue, const std::string& desc)
param	flags/command_args.cpp	/^void CommandArgs::param(const std::strng& name, int& p, int defValue, const std::string& desc)$/;"	f	class:CommandArgs	signature:(const std::strng& name, int& p, int defValue, const std::string& desc)
param	flags/command_args.cpp	/^void CommandArgs::param(const std::strng& name, std::string& p, const std::strng& defValue, const std::string& desc)$/;"	f	class:CommandArgs	signature:(const std::strng& name, std::string& p, const std::strng& defValue, const std::string& desc)
param	flags/command_args.cpp	/^void CommandArgs::param(const std::strng& name, std::vector<double>& p, const std::vector<double>& defValue, const std::string& desc)$/;"	f	class:CommandArgs	signature:(const std::strng& name, std::vector<double>& p, const std::vector<double>& defValue, const std::string& desc)
param	flags/command_args.cpp	/^void CommandArgs::param(const std::strng& name, std::vector<int>& p, const std::vector<int>& defValue, const std::string& desc)$/;"	f	class:CommandArgs	signature:(const std::strng& name, std::vector<int>& p, const std::vector<int>& defValue, const std::string& desc)
param	flags/command_args.h	/^        void param(const std::string& name, bool& p, bool defValue, const std::string& desc);$/;"	p	class:CommandArgs	access:public	signature:(const std::string& name, bool& p, bool defValue, const std::string& desc)
param	flags/command_args.h	/^        void param(const std::string& name, double& p, double defValue, const std::string& desc);$/;"	p	class:CommandArgs	access:public	signature:(const std::string& name, double& p, double defValue, const std::string& desc)
param	flags/command_args.h	/^        void param(const std::string& name, float& p, float defValue, const std::string& desc);$/;"	p	class:CommandArgs	access:public	signature:(const std::string& name, float& p, float defValue, const std::string& desc)
param	flags/command_args.h	/^        void param(const std::string& name, int& p, int defValue, const std::string& desc);$/;"	p	class:CommandArgs	access:public	signature:(const std::string& name, int& p, int defValue, const std::string& desc)
param	flags/command_args.h	/^        void param(const std::string& name, std::string& p, const std::string& defValue, const std::string& desc);$/;"	p	class:CommandArgs	access:public	signature:(const std::string& name, std::string& p, const std::string& defValue, const std::string& desc)
param	flags/command_args.h	/^        void param(const std::string& name, std::vector<double>& p, const std::vector<double>& defValue, const std::string& desc);$/;"	p	class:CommandArgs	access:public	signature:(const std::string& name, std::vector<double>& p, const std::vector<double>& defValue, const std::string& desc)
param	flags/command_args.h	/^        void param(const std::string& name, std::vector<int>& p, const std::vector<int>& defValue, const std::string& desc);$/;"	p	class:CommandArgs	access:public	signature:(const std::string& name, std::vector<int>& p, const std::vector<int>& defValue, const std::string& desc)
paramLeftOver	flags/command_args.cpp	/^void CommandArgs::paramLeftOver(const std::string& name, std::string& p, const std::string& defValue, const std::string& desc, bool optional)$/;"	f	class:CommandArgs	signature:(const std::string& name, std::string& p, const std::string& defValue, const std::string& desc, bool optional)
paramLeftOver	flags/command_args.h	/^        void paramLeftOver(const std::string& name, std::string& p, const std::string& defValue, const std::string& desc, bool optional = false);$/;"	p	class:CommandArgs	access:public	signature:(const std::string& name, std::string& p, const std::string& defValue, const std::string& desc, bool optional = false)
parameters	BALProblem.h	/^        const double* parameters() const$/;"	f	class:BALProblem	access:public	signature:() const
parameters_	BALProblem.h	/^        double* parameters_;$/;"	m	class:BALProblem	access:private
parseArgs	flags/command_args.cpp	/^bool CommandArgs::parseArgs::parseArgs(int argc, char** argv, bool exitOnError)$/;"	f	class:CommandArgs::parseArgs	signature:(int argc, char** argv, bool exitOnError)
parseArgs	flags/command_args.h	/^        bool parseArgs(int argc, char** argv, bool exitOnError = true);$/;"	p	class:CommandArgs	access:public	signature:(int argc, char** argv, bool exitOnError = true)
parseParam	flags/command_args.h	/^        bool parseParam(const std::string& paramFlag) const;$/;"	p	class:CommandArgs	access:public	signature:(const std::string& paramFlag) const
parsed	flags/command_args.h	/^            bool parsed;$/;"	m	struct:CommandArgs::CommandArgument	access:public
parsedParam	flags/command_args.cpp	/^bool CommandArgs::parsedParam(const std::string& param) const$/;"	f	class:CommandArgs	signature:(const std::string& param) const
point_block_size	BALProblem.h	/^        int point_block_size() const$/;"	f	class:BALProblem	access:public	signature:() const
point_for_observation	BALProblem.h	/^        const double* point_for_observation(int i) const$/;"	f	class:BALProblem	access:public	signature:(int i) const
point_index	BALProblem.h	/^        const int* point_index() const$/;"	f	class:BALProblem	access:public	signature:() const
point_index_	BALProblem.h	/^        int* point_index_;$/;"	m	class:BALProblem	access:private
point_sigma	BundleParams.h	/^        double point_sigma;$/;"	m	struct:BundleParams	access:public
points	BALProblem.h	/^        const double* points() const$/;"	f	class:BALProblem	access:public	signature:() const
printHelp	flags/command_args.cpp	/^void CommandArgs::printHelp(std::ostream& os)$/;"	f	class:CommandArgs	signature:(std::ostream& os)
printHelp	flags/command_args.h	/^        void printHelp(std::ostream& os);$/;"	p	class:CommandArgs	access:public	signature:(std::ostream& os)
printParams	flags/command_args.h	/^        void printParams(std::ostream& os);$/;"	p	class:CommandArgs	access:public	signature:(std::ostream& os)
random_seed	BundleParams.h	/^        int random_seed;$/;"	m	struct:BundleParams	access:public
robustify	BundleParams.h	/^        bool robustify;$/;"	m	struct:BundleParams	access:public
rotation_sigma	BundleParams.h	/^        double rotation_sigma;$/;"	m	struct:BundleParams	access:public
setBanner	flags/command_args.cpp	/^void CommandArgs::setBanner(const std::string& banner)$/;"	f	class:CommandArgs	signature:(const std::string& banner)
setBanner	flags/command_args.h	/^        void setBanner(const std::string& banner);$/;"	p	class:CommandArgs	access:public	signature:(const std::string& banner)
sparse_linear_algebra_library	BundleParams.h	/^        string sparse_linear_algebra_library;$/;"	m	struct:BundleParams	access:public
str2arg	flags/command_args.cpp	/^void CommandArgs::str2arg(const std::string& input, CommandArgument& ca) const$/;"	f	class:CommandArgs	signature:(const std::string& input, CommandArgument& ca) const
str2arg	flags/command_args.h	/^        void str2arg(const std::string& input, CommandArgument& ca) const;$/;"	p	class:CommandArgs	access:protected	signature:(const std::string& input, CommandArgument& ca) const
translation_sigma	BundleParams.h	/^        double translation_sigma;$/;"	m	struct:BundleParams	access:public
trim	flags/command_args.h	/^        std::string trim(const std::string& s) const;$/;"	p	class:CommandArgs	access:protected	signature:(const std::string& s) const
trust_region_strategy	BundleParams.h	/^        string trust_region_strategy;$/;"	m	struct:BundleParams	access:public
type	flags/command_args.h	/^            int type;$/;"	m	struct:CommandArgs::CommandArgument	access:public
type2str	flags/command_args.cpp	/^const char* CommandArgs::type2str(int t) const$/;"	f	class:CommandArgs	signature:(int t) const
type2str	flags/command_args.h	/^        const char* type2str(int t) const;$/;"	p	class:CommandArgs	access:protected	signature:(int t) const
use_quaternions_	BALProblem.h	/^        bool use_quaternions_;$/;"	m	class:BALProblem	access:private
~BALProblem	BALProblem.h	/^        ~BALProblem()$/;"	f	class:BALProblem	access:public	signature:()
~BundleParams	BundleParams.h	/^        virtual ~BundleParams() {}$/;"	f	struct:BundleParams	access:public	signature:()
~CommandArgs	flags/command_args.cpp	/^commandArgs::~CommandArgs()$/;"	f	class:commandArgs	signature:()
~CommandArgs	flags/command_args.h	/^        virtual ~CommandArgs();$/;"	p	class:CommandArgs	access:public	signature:()
